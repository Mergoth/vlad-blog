---
import Base from '../../../layouts/Base.astro'
import { getCollection } from 'astro:content'
import Reactions from '../../../components/Reactions'

export async function getStaticPaths() {
  const locales = ['en','es','ru'] as const
  const paths: { params: { lang: typeof locales[number]; slug: string } }[] = []
  for (const lang of locales) {
    const entries = (await getCollection(lang)).filter((e) => e.slug.startsWith('posts/'))
    for (const e of entries) {
      const shortSlug = e.slug.replace(/^posts\//, '')
      paths.push({ params: { lang, slug: shortSlug } })
    }
  }
  return paths
}

const lang = Astro.params.lang as 'en' | 'es' | 'ru'
const slug = Astro.params.slug as string
const entries = await getCollection(lang)
const entry = entries.find((e) => e.slug === `posts/${slug}`)
if (!entry) {
  throw new Error('Not found')
}
const { Content } = await entry.render()
const data = entry.data

const allLocales = ['en','es','ru'] as const
const alternates = await (async () => {
  const id = data.id
  const res: { lang: typeof allLocales[number]; path: string }[] = []
  for (const l of allLocales) {
    if (l === lang) { res.push({ lang: l, path: `/${l}/posts/${slug}` }); continue }
    const coll = await getCollection(l)
    let targetSlug = slug
    if (id) {
      const match = coll.find((e) => e.data.id && e.data.id === id && e.slug.startsWith('posts/'))
      if (match) targetSlug = match.slug.replace(/^posts\//, '')
    }
    res.push({ lang: l, path: `/${l}/posts/${targetSlug}` })
  }
  return res
})()

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat(lang === 'ru' ? 'ru-RU' : lang === 'es' ? 'es-ES' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date)
}
---
<Base lang={lang} title={data.title} description={data.description} alternates={alternates}>
  <div class="max-w-4xl mx-auto px-4 py-12">
    <article class="bg-white rounded-lg shadow-lg overflow-hidden">
      <div class="px-8 py-12">
        <header class="mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4 leading-tight">
            {data.title}
          </h1>
          <div class="flex items-center text-gray-600 mb-6">
            <time class="text-sm font-medium">
              {formatDate(data.date)}
            </time>
          </div>
          {data.description && (
            <p class="text-xl text-gray-600 leading-relaxed">
              {data.description}
            </p>
          )}
        </header>
        
        <div class="prose prose-lg max-w-none prose-headings:text-gray-900 prose-p:text-gray-700 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline prose-strong:text-gray-900 prose-code:text-pink-600 prose-code:bg-gray-100 prose-code:px-1 prose-code:rounded">
          <Content />
        </div>
      </div>
    </article>
    
    {/* CASCADE: Reactions UI */}
    <div class="mt-8">
      <Reactions client:load lang={lang} slug={`/${lang}/posts/${slug}`} />
    </div>

    <div class="mt-8 text-center">
      <a 
        href={`/${lang}`}
        class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
      >
        <svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        {lang === 'ru' ? 'Назад к блогу' : lang === 'es' ? 'Volver al blog' : 'Back to blog'}
      </a>
    </div>
  </div>
</Base>
